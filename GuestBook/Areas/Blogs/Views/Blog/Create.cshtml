@model DataAccessObjects.Blog
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="../../../../Content/jquery.cleditor.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="../../../../Scripts/jquery.cleditor.js"></script>

<div>
    @using (Html.BeginForm("Create", "Blog", FormMethod.Post))
    {
        <div>
            <div>
                <span>Category</span>
                    @Html.TextBoxFor(e => e.Category)
            </div>
            <div>
            <span>Topic</span>
                @Html.TextBoxFor(e => e.Topic)
            </div>
            <div id="textarea">
                @Html.TextAreaFor(e => e.Text)
            </div>
            <input type="submit" value="Create" />
        </div>
    }
</div>
<div class="bottompara">
    <p>
        Here we would look at some security aspects of MVC. Login and authentication is
        kind of security where you prevent un-authorized users to enter the web site or
        any other application. So what else do we need? If you feel that just preventing
        un-authorized user from entering the site makes the web-site secure for the owner
        and the user of the site, then you are wrong. The web site is vulnerable for different
        kind of attacks from a hacker and/or malicious users. Now ASP.NET comes for your
        rescue in some cases where it prevents untrusted data from reaching your application.
        Prevention is better than cure. But there are situations where you need to purposely
        open up a vector for the malicious users to do their tricks. Sites like these where
        users are allowed to enter free form text and save it so that other user can see
        what mischive they have done. Not kidding there, this is a real problem. For sites
        where formatted HTML needs to be stored into the datastore, makes the site vulnerable
        for attacks. For this we need to tell explicitly to the ASP.NET engine to allow
        untrusted data to enter your application. So what can be these attacks. <a href="https://www.owasp.org/index.php/Top_10_2013-Top_10"
                                                                                   target="_blank" class="fancyA">Here</a> is a list of top 10 security risks.
        I know you were not expecting to tell you all these security risk on this site :).
        See I need to explain how MVC helps us on basic security, and how can you handle
        scenarios where you want to allow the users to enter untrusted data. The WYSIWYG
        editors have data that cannot be trusted as it contains HTML &lt;TAGS&gt;
    </p>
</div>

<script type="text/javascript">
    $(function () {
        $("#Text").cleditor({
            width: "100%"
        });
    });
</script>
